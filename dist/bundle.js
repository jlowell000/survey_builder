(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Component {
    constructor(ele) {
        this.state = {};
        this.childComponents = [];
        this.ele = ele;
    }
    setState(state) {
        Object.assign(this.state, state);
        return this.init();
    }
    async init() {
        await this.initChildern();
        return this;
    }
    initChildern() {
        return Promise.all(this.childComponents.map(c => { return c.init(); }));
    }
    template() {
        return ``;
    }
}
exports.default = Component;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = require("./Component");
class Input extends Component_1.default {
    constructor(ele, name) {
        super(ele);
        this.name = name;
    }
    getData() {
        let obj = {};
        obj[this.name] = this.value;
        return obj;
    }
    onChange(e) {
        this.value = e.target.value;
    }
    templateProps() {
        let p = new Array();
        p.push(' ');
        if (this.state.readonly)
            p.push('readonly');
        if (this.state.disabled)
            p.push('disabled');
        return p.join(' ');
    }
}
exports.Input = Input;
class Form extends Component_1.default {
    constructor(ele, inputs) {
        super(ele);
        this.childComponents.push(...inputs);
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.childComponents.forEach((v, i) => {
            v.ele = this.ele.querySelector(`#input_${i}`);
        });
        this.ele.querySelector('#submit').addEventListener('click', this.onSubmit.bind(this));
        this.ele.querySelector('#cancel').addEventListener('click', this.onCancel.bind(this));
        return super.init();
    }
    getData() {
        let data = {};
        this.childComponents.forEach(i => {
            Object.assign(data, i.getData());
        });
        return data;
    }
    onSubmit() {
        console.log(this.getData());
    }
    onCancel() {
        this.ele.querySelector('form').reset();
    }
    inputsTemplate() {
        return this.childComponents.map((_v, i) => {
            return `<div class='field'>
                        <p id='input_${i}' class='control'></p>
                    </div>`;
        }).join('');
    }
    template() {
        return `<form>
                    ${this.inputsTemplate()}
                    <span class='field is-grouped'>
                        <p class='control'><a id='submit' class='button is-primary'>Submit</a></p>
                        <p class='control'><a id='cancel' class='button is-light'>Cancel</a></p>
                    </span>
                </form>`;
    }
}
exports.Form = Form;
class Textinput extends Input {
    constructor(ele, name) {
        super(ele, name);
        this.state.type = 'text';
        this.state.placeholder = 'Input';
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('input').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    template() {
        return `<input class='input' type='${this.state.type}' placeholder='${this.state.placeholder}' ${this.templateProps()}>`;
    }
}
exports.Textinput = Textinput;
class Textarea extends Input {
    constructor(ele, name) {
        super(ele, name);
        this.state.placeholder = 'Input';
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('textarea').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    template() {
        return `<textarea class='textarea' placeholder='${this.state.placeholder}'
        ${this.state.row ? ` rows='${this.state.rows}'` : ''} ${this.templateProps()}></textarea>`;
    }
}
exports.Textarea = Textarea;
class Dropdown extends Input {
    constructor(ele, name, options) {
        super(ele, name);
        this.options = options;
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('select').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    optionsTemplate() {
        return this.options.map(o => {
            return `<option value='${o.value}'>${o.value}</option>`;
        }).join('');
    }
    template() {
        return `<span class='select'>
                    <select ${this.templateProps()}>${this.optionsTemplate()}</select>
                </span>`;
    }
}
exports.Dropdown = Dropdown;
class Checkbox extends Input {
    constructor(ele, name, label) {
        super(ele, name);
        this.label = label;
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('input').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    onChange(e) {
        this.value = e.target.checked;
    }
    template() {
        return `<label class='checkbox'><input type='checkbox' ${this.templateProps()}>${this.label}</label>`;
    }
}
exports.Checkbox = Checkbox;
class Radio extends Input {
    constructor(ele, name, options) {
        super(ele, name);
        this.options = options;
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('div').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    radioTemplate() {
        return this.options.map(o => {
            return ` <label class='radio'><input type='radio' value='${o.value}' name='${this.name}'>${o.text}</label>`;
        }).join('');
    }
    onChange(e) {
        let checkedInput = Array.from(this.ele.querySelectorAll('input'))
            .find(i => {
            return i.checked;
        });
        this.value = checkedInput.value;
    }
    template() {
        return `<div class='control'>${this.radioTemplate()}</div>`;
    }
}
exports.Radio = Radio;

},{"./Component":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = require("./components/common/Component");
const Inputs_1 = require("./components/common/Inputs");
class Main extends Component_1.default {
    static load() {
        let main = new Main(document.body);
        main.init();
    }
    async init() {
        let input;
        this.ele.innerHTML = this.template();
        this.childComponents.push(new Inputs_1.Form(this.ele.querySelector('#form'), [
            new Inputs_1.Textinput(null, 'text_input'),
            new Inputs_1.Textarea(null, 'text_area'),
            new Inputs_1.Dropdown(null, 'dropdown', [
                { value: 1, text: 'One' },
                { value: 2, text: 'Two' }
            ]),
            new Inputs_1.Checkbox(null, 'checkbox', 'Is this a test'),
            new Inputs_1.Radio(null, 'radio_test', [
                { value: 1, text: 'One' },
                { value: 2, text: 'Two' }
            ])
        ]));
        return super.init();
    }
    template() {
        return `<div id='form'></div>`;
    }
}
document.addEventListener('DOMContentLoaded', Main.load);

},{"./components/common/Component":1,"./components/common/Inputs":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29tcG9uZW50cy9jb21tb24vQ29tcG9uZW50LnRzIiwic3JjL2NvbXBvbmVudHMvY29tbW9uL0lucHV0cy50cyIsInNyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBQSxNQUFxQixTQUFTO0lBTTFCLFlBQVksR0FBWTtRQUpmLFVBQUssR0FBUSxFQUFFLENBQUM7UUFFaEIsb0JBQWUsR0FBcUIsRUFBRSxDQUFDO1FBRzVDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0lBQ25CLENBQUM7SUFDRCxRQUFRLENBQUMsS0FBVTtRQUNmLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqQyxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBQ0QsS0FBSyxDQUFDLElBQUk7UUFDTixNQUFNLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUMxQixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ0QsWUFBWTtRQUNSLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBQ0QsUUFBUTtRQUNKLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNKO0FBdkJELDRCQXVCQzs7Ozs7QUN2QkQsMkNBQW9DO0FBRXBDLE1BQWUsS0FBTSxTQUFRLG1CQUFTO0lBS2xDLFlBQVksR0FBWSxFQUFFLElBQVk7UUFDbEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUVELE9BQU87UUFD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ZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50IHtcblxuICAgIHJlYWRvbmx5IHN0YXRlOiBhbnkgPSB7fTtcbiAgICBlbGU6IEVsZW1lbnQ7XG4gICAgcmVhZG9ubHkgY2hpbGRDb21wb25lbnRzOiBBcnJheTxDb21wb25lbnQ+ID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihlbGU6IEVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5lbGUgPSBlbGU7XG4gICAgfVxuICAgIHNldFN0YXRlKHN0YXRlOiBhbnkpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLnN0YXRlLCBzdGF0ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmluaXQoKTtcbiAgICB9XG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5pbml0Q2hpbGRlcm4oKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGluaXRDaGlsZGVybigpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHRoaXMuY2hpbGRDb21wb25lbnRzLm1hcChjID0+IHsgcmV0dXJuIGMuaW5pdCgpOyB9KSk7XG4gICAgfVxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYGA7XG4gICAgfVxufSIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9Db21wb25lbnQnO1xuXG5hYnN0cmFjdCBjbGFzcyBJbnB1dCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICBwcm90ZWN0ZWQgbmFtZTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGVsZTogRWxlbWVudCwgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGVsZSk7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgfVxuXG4gICAgZ2V0RGF0YSgpIHtcbiAgICAgICAgbGV0IG9iajogeyBbazogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiB9ID0ge307XG4gICAgICAgIG9ialt0aGlzLm5hbWVdID0gdGhpcy52YWx1ZVxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBvbkNoYW5nZShlOiBFdmVudCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xuICAgIH1cbiAgICB0ZW1wbGF0ZVByb3BzKCkge1xuICAgICAgICBsZXQgcDogc3RyaW5nW10gPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gICAgICAgIHAucHVzaCgnICcpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5yZWFkb25seSkgcC5wdXNoKCdyZWFkb25seScpO1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5kaXNhYmxlZCkgcC5wdXNoKCdkaXNhYmxlZCcpO1xuXG4gICAgICAgIHJldHVybiBwLmpvaW4oJyAnKTtcbiAgICB9XG59XG5cbmludGVyZmFjZSBPcHRpb248VCBleHRlbmRzIG51bWJlciB8IHN0cmluZywgVSBleHRlbmRzIG51bWJlciB8IHN0cmluZz4ge1xuICAgIHZhbHVlOiBUO1xuICAgIHRleHQ6IFU7XG59XG5cbmNsYXNzIEZvcm0gZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgY29uc3RydWN0b3IoZWxlOiBFbGVtZW50LCBpbnB1dHM6IElucHV0W10pIHtcbiAgICAgICAgc3VwZXIoZWxlKTtcbiAgICAgICAgdGhpcy5jaGlsZENvbXBvbmVudHMucHVzaCguLi5pbnB1dHMpO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIHRoaXMuZWxlLmlubmVySFRNTCA9IHRoaXMudGVtcGxhdGUoKTtcblxuICAgICAgICB0aGlzLmNoaWxkQ29tcG9uZW50cy5mb3JFYWNoKCh2LCBpKSA9PiB7XG4gICAgICAgICAgICB2LmVsZSA9IHRoaXMuZWxlLnF1ZXJ5U2VsZWN0b3IoYCNpbnB1dF8ke2l9YCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZWxlLnF1ZXJ5U2VsZWN0b3IoJyNzdWJtaXQnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25TdWJtaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuZWxlLnF1ZXJ5U2VsZWN0b3IoJyNjYW5jZWwnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DYW5jZWwuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICBnZXREYXRhKCkge1xuICAgICAgICBsZXQgZGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmNoaWxkQ29tcG9uZW50cy5mb3JFYWNoKGkgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihkYXRhLCAoaSBhcyBJbnB1dCkuZ2V0RGF0YSgpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIG9uU3VibWl0KCkge1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdldERhdGEoKSk7XG4gICAgfVxuICAgIG9uQ2FuY2VsKCkge1xuICAgICAgICB0aGlzLmVsZS5xdWVyeVNlbGVjdG9yKCdmb3JtJykucmVzZXQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGlucHV0c1RlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZENvbXBvbmVudHMubWFwKChfdiwgaSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPSdmaWVsZCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBpZD0naW5wdXRfJHtpfScgY2xhc3M9J2NvbnRyb2wnPjwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+YDtcbiAgICAgICAgfSkuam9pbignJyk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGZvcm0+XG4gICAgICAgICAgICAgICAgICAgICR7dGhpcy5pbnB1dHNUZW1wbGF0ZSgpfVxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0nZmllbGQgaXMtZ3JvdXBlZCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0nY29udHJvbCc+PGEgaWQ9J3N1Ym1pdCcgY2xhc3M9J2J1dHRvbiBpcy1wcmltYXJ5Jz5TdWJtaXQ8L2E+PC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9J2NvbnRyb2wnPjxhIGlkPSdjYW5jZWwnIGNsYXNzPSdidXR0b24gaXMtbGlnaHQnPkNhbmNlbDwvYT48L3A+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Zvcm0+YDtcbiAgICB9XG59XG5cbmNsYXNzIFRleHRpbnB1dCBleHRlbmRzIElucHV0IHtcblxuICAgIGNvbnN0cnVjdG9yKGVsZTogRWxlbWVudCwgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGVsZSwgbmFtZSk7XG4gICAgICAgIHRoaXMuc3RhdGUudHlwZSA9ICd0ZXh0JztcbiAgICAgICAgdGhpcy5zdGF0ZS5wbGFjZWhvbGRlciA9ICdJbnB1dCc7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5lbGUuaW5uZXJIVE1MID0gdGhpcy50ZW1wbGF0ZSgpO1xuICAgICAgICB0aGlzLmVsZS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiBzdXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGlucHV0IGNsYXNzPSdpbnB1dCcgdHlwZT0nJHt0aGlzLnN0YXRlLnR5cGV9JyBwbGFjZWhvbGRlcj0nJHt0aGlzLnN0YXRlLnBsYWNlaG9sZGVyfScgJHt0aGlzLnRlbXBsYXRlUHJvcHMoKX0+YDtcbiAgICB9XG59XG5cbmNsYXNzIFRleHRhcmVhIGV4dGVuZHMgSW5wdXQge1xuXG4gICAgY29uc3RydWN0b3IoZWxlOiBFbGVtZW50LCBuYW1lOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIoZWxlLCBuYW1lKTtcbiAgICAgICAgdGhpcy5zdGF0ZS5wbGFjZWhvbGRlciA9ICdJbnB1dCc7XG4gICAgfVxuXG4gICAgYXN5bmMgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5lbGUuaW5uZXJIVE1MID0gdGhpcy50ZW1wbGF0ZSgpO1xuICAgICAgICB0aGlzLmVsZS5xdWVyeVNlbGVjdG9yKCd0ZXh0YXJlYScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiBzdXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPHRleHRhcmVhIGNsYXNzPSd0ZXh0YXJlYScgcGxhY2Vob2xkZXI9JyR7dGhpcy5zdGF0ZS5wbGFjZWhvbGRlcn0nXG4gICAgICAgICR7dGhpcy5zdGF0ZS5yb3cgPyBgIHJvd3M9JyR7dGhpcy5zdGF0ZS5yb3dzfSdgIDogJyd9ICR7dGhpcy50ZW1wbGF0ZVByb3BzKCl9PjwvdGV4dGFyZWE+YDtcbiAgICB9XG59XG5cbmNsYXNzIERyb3Bkb3duPFQgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmcsIFUgZXh0ZW5kcyBudW1iZXIgfCBzdHJpbmc+IGV4dGVuZHMgSW5wdXQge1xuXG4gICAgcHJpdmF0ZSBvcHRpb25zOiBPcHRpb248VCwgVT5bXTtcblxuICAgIGNvbnN0cnVjdG9yKGVsZTogRWxlbWVudCwgbmFtZTogc3RyaW5nLCBvcHRpb25zOiBPcHRpb248VCwgVT5bXSkge1xuICAgICAgICBzdXBlcihlbGUsIG5hbWUpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIHRoaXMuZWxlLmlubmVySFRNTCA9IHRoaXMudGVtcGxhdGUoKTtcbiAgICAgICAgdGhpcy5lbGUucXVlcnlTZWxlY3Rvcignc2VsZWN0JykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9wdGlvbnNUZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5tYXAobyA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYDxvcHRpb24gdmFsdWU9JyR7by52YWx1ZX0nPiR7by52YWx1ZX08L29wdGlvbj5gO1xuICAgICAgICB9KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8c3BhbiBjbGFzcz0nc2VsZWN0Jz5cbiAgICAgICAgICAgICAgICAgICAgPHNlbGVjdCAke3RoaXMudGVtcGxhdGVQcm9wcygpfT4ke3RoaXMub3B0aW9uc1RlbXBsYXRlKCl9PC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9zcGFuPmA7XG4gICAgfVxufVxuXG5jbGFzcyBDaGVja2JveCBleHRlbmRzIElucHV0IHtcblxuICAgIHByaXZhdGUgbGFiZWw6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKGVsZTogRWxlbWVudCwgbmFtZTogc3RyaW5nLCBsYWJlbDogc3RyaW5nKSB7XG4gICAgICAgIHN1cGVyKGVsZSwgbmFtZSk7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICB9XG5cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICB0aGlzLmVsZS5pbm5lckhUTUwgPSB0aGlzLnRlbXBsYXRlKCk7XG4gICAgICAgIHRoaXMuZWxlLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgdGhpcy5vbkNoYW5nZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICBvbkNoYW5nZShlOiBFdmVudCkge1xuICAgICAgICB0aGlzLnZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLmNoZWNrZWQ7XG4gICAgfVxuXG4gICAgdGVtcGxhdGUoKSB7XG4gICAgICAgIHJldHVybiBgPGxhYmVsIGNsYXNzPSdjaGVja2JveCc+PGlucHV0IHR5cGU9J2NoZWNrYm94JyAke3RoaXMudGVtcGxhdGVQcm9wcygpfT4ke3RoaXMubGFiZWx9PC9sYWJlbD5gXG4gICAgfVxufVxuXG5jbGFzcyBSYWRpbzxUIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nLCBVIGV4dGVuZHMgbnVtYmVyIHwgc3RyaW5nPiBleHRlbmRzIElucHV0IHtcblxuICAgIHByaXZhdGUgb3B0aW9uczogT3B0aW9uPFQsIFU+W107XG5cbiAgICBjb25zdHJ1Y3RvcihlbGU6IEVsZW1lbnQsIG5hbWU6IHN0cmluZywgb3B0aW9uczogT3B0aW9uPFQsIFU+W10pIHtcbiAgICAgICAgc3VwZXIoZWxlLCBuYW1lKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBhc3luYyBpbml0KCkge1xuICAgICAgICB0aGlzLmVsZS5pbm5lckhUTUwgPSB0aGlzLnRlbXBsYXRlKCk7XG4gICAgICAgIHRoaXMuZWxlLnF1ZXJ5U2VsZWN0b3IoJ2RpdicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMub25DaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiBzdXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByYWRpb1RlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLm1hcChvID0+IHtcbiAgICAgICAgICAgIHJldHVybiBgIDxsYWJlbCBjbGFzcz0ncmFkaW8nPjxpbnB1dCB0eXBlPSdyYWRpbycgdmFsdWU9JyR7by52YWx1ZX0nIG5hbWU9JyR7dGhpcy5uYW1lfSc+JHtvLnRleHR9PC9sYWJlbD5gXG4gICAgICAgIH0pLmpvaW4oJycpO1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKGU6IEV2ZW50KSB7XG4gICAgICAgIGxldCBjaGVja2VkSW5wdXQgPSBBcnJheS5mcm9tKHRoaXMuZWxlLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpXG4gICAgICAgICAgICAuZmluZChpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaS5jaGVja2VkO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IGNoZWNrZWRJbnB1dC52YWx1ZTtcbiAgICB9XG5cbiAgICB0ZW1wbGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPSdjb250cm9sJz4ke3RoaXMucmFkaW9UZW1wbGF0ZSgpfTwvZGl2PmA7XG4gICAgfVxufVxuXG5leHBvcnQgeyBGb3JtLCBJbnB1dCwgVGV4dGlucHV0LCBUZXh0YXJlYSwgRHJvcGRvd24sIENoZWNrYm94LCBSYWRpbyB9OyIsImltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnRzL2NvbW1vbi9Db21wb25lbnQnO1xuaW1wb3J0IHsgRm9ybSwgSW5wdXQsIFRleHRpbnB1dCwgVGV4dGFyZWEsIERyb3Bkb3duLCBDaGVja2JveCwgUmFkaW8gfSBmcm9tICcuL2NvbXBvbmVudHMvY29tbW9uL0lucHV0cyc7XG5cbmNsYXNzIE1haW4gZXh0ZW5kcyBDb21wb25lbnQge1xuXG4gICAgc3RhdGljIGxvYWQoKSB7XG4gICAgICAgIGxldCBtYWluID0gbmV3IE1haW4oZG9jdW1lbnQuYm9keSk7XG4gICAgICAgIG1haW4uaW5pdCgpO1xuICAgIH1cblxuICAgIGFzeW5jIGluaXQoKSB7XG4gICAgICAgIGxldCBpbnB1dDogSW5wdXQ7XG5cbiAgICAgICAgdGhpcy5lbGUuaW5uZXJIVE1MID0gdGhpcy50ZW1wbGF0ZSgpO1xuXG4gICAgICAgIHRoaXMuY2hpbGRDb21wb25lbnRzLnB1c2gobmV3IEZvcm0odGhpcy5lbGUucXVlcnlTZWxlY3RvcignI2Zvcm0nKSwgW1xuICAgICAgICAgICAgbmV3IFRleHRpbnB1dChudWxsLCAndGV4dF9pbnB1dCcpLFxuICAgICAgICAgICAgbmV3IFRleHRhcmVhKG51bGwsICd0ZXh0X2FyZWEnKSxcbiAgICAgICAgICAgIG5ldyBEcm9wZG93bihudWxsLCAnZHJvcGRvd24nLCBbXG4gICAgICAgICAgICAgICAgeyB2YWx1ZTogMSwgdGV4dDogJ09uZScgfSxcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiAyLCB0ZXh0OiAnVHdvJyB9XG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIG5ldyBDaGVja2JveChudWxsLCAnY2hlY2tib3gnLCAnSXMgdGhpcyBhIHRlc3QnKSxcbiAgICAgICAgICAgIG5ldyBSYWRpbyhudWxsLCAncmFkaW9fdGVzdCcsIFtcbiAgICAgICAgICAgICAgICB7IHZhbHVlOiAxLCB0ZXh0OiAnT25lJyB9LFxuICAgICAgICAgICAgICAgIHsgdmFsdWU6IDIsIHRleHQ6ICdUd28nIH1cbiAgICAgICAgICAgIF0pXG4gICAgICAgIF0pKTtcblxuICAgICAgICByZXR1cm4gc3VwZXIuaW5pdCgpO1xuICAgIH1cblxuICAgIHRlbXBsYXRlKCkge1xuICAgICAgICByZXR1cm4gYDxkaXYgaWQ9J2Zvcm0nPjwvZGl2PmA7XG4gICAgfVxufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgTWFpbi5sb2FkKTsiXX0=
