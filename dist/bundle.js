(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = require("./common/Component");
const Inputs_1 = require("./common/Inputs");
class CreateInput extends Component_1.default {
    constructor() {
        super(...arguments);
        this.typeOptions = [
            { value: '', text: 'Select Type' },
            { value: 'text', text: 'Text' },
            { value: 'textarea', text: 'Text Area' },
            { value: 'dropdown', text: 'Drop Down' },
            { value: 'checkbox', text: 'Check Box' },
            { value: 'radio', text: 'Radio' }
        ];
        this.optionedType = [
            'dropdown',
            'radio'
        ];
    }
    async init() {
        let name = new Inputs_1.Textinput(null, 'name', {
            label: 'Field Name',
            placeholder: 'Name of field'
        }), type = new Inputs_1.Dropdown(null, 'type', this.typeOptions, {
            label: 'Input Type'
        }), desc = new Inputs_1.Textarea(null, 'question', {
            label: 'Question',
            placeholder: 'Question . . .'
        });
        type.setOnChangeCallBack(this.onTypeChange.bind(this));
        this.form = new Inputs_1.Form(this.ele, [name, type, desc]);
        this.form.onSubmit = this.onSubmit.bind(this);
        this.childComponents.push(this.form);
        return super.init();
    }
    onTypeChange(value) {
        if (this.optionedType.includes(value)) {
            console.log(`${value} needs options`);
            //TODO: need to make options input
        }
    }
    onSubmit() {
        console.log(this.form.getData());
    }
}
exports.default = CreateInput;

},{"./common/Component":2,"./common/Inputs":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Component {
    constructor(ele, config) {
        this.state = {};
        this.childComponents = [];
        this.ele = ele;
        this.config = config;
    }
    setState(state) {
        Object.assign(this.state, state);
        return this.init();
    }
    async init() {
        await this.initChildern();
        return this;
    }
    initChildern() {
        return Promise.all(this.childComponents.map(c => { return c.init(); }));
    }
    template() {
        return ``;
    }
}
exports.default = Component;
exports.Component = Component;

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = require("./Component");
class Input extends Component_1.Component {
    constructor(ele, name, config) {
        super(ele, config);
        this.name = name;
    }
    getData() {
        let obj = {};
        obj[this.name] = this.value;
        return obj;
    }
    onChange(e) {
        this.value = e.target.value;
        if (this.onChangeCallback)
            this.onChangeCallback(this.value);
    }
    setOnChangeCallBack(callback) {
        this.onChangeCallback = callback;
    }
    templateProps() {
        let p = new Array();
        p.push(' ');
        if (this.state.readonly)
            p.push('readonly');
        if (this.state.disabled)
            p.push('disabled');
        return p.join(' ');
    }
}
exports.Input = Input;
class Form extends Component_1.Component {
    constructor(ele, inputs, config) {
        super(ele, config);
        this.childComponents.push(...inputs);
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.childComponents.forEach((v, i) => {
            v.ele = this.ele.querySelector(`#input_${i}`);
        });
        this.ele.querySelector('#submit').addEventListener('click', this.onSubmit.bind(this));
        this.ele.querySelector('#cancel').addEventListener('click', this.onCancel.bind(this));
        return super.init();
    }
    getData() {
        let data = {};
        this.childComponents.forEach(i => {
            Object.assign(data, i.getData());
        });
        return data;
    }
    onSubmit() {
        console.log(this.getData());
    }
    onCancel() {
        this.ele.querySelector('form').reset();
    }
    inputsTemplate() {
        let config = this.config, template = this.config && config.inline ?
            (_v, i) => { return `<p id='input_${i}' class='control'></p>`; } :
            (_v, i) => {
                return `<div class='field'>
                            <p id='input_${i}' class='control'></p>
                        </div>`;
            };
        return this.childComponents.map(template).join('');
    }
    template() {
        let config = this.config;
        return `<form class='box'>
                    ${this.config && config.inline ? '' : this.inputsTemplate()}
                    <span class='field is-grouped'>
                        ${this.config && config.inline ? this.inputsTemplate() : ''}
                        <p class='control'><a id='submit' class='button is-primary'>Submit</a></p>
                        <p class='control'><a id='cancel' class='button is-light'>Cancel</a></p>
                    </span>
                </form>`;
    }
}
exports.Form = Form;
class Textinput extends Input {
    constructor(ele, name, config) {
        super(ele, name, config);
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('input').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    template() {
        let config = this.config;
        return `<label>${config.label ? config.label : name}
                    <input class='input' type='${config.type ? config.type : 'text'}' 
                        placeholder='${config.placeholder ? config.placeholder : 'input'}' ${this.templateProps()}>
                </label>`;
    }
}
exports.Textinput = Textinput;
class Textarea extends Input {
    constructor(ele, name, config) {
        super(ele, name, config);
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('textarea').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    template() {
        let config = this.config;
        return `<label>${config.label ? config.label : this.name}
                    <textarea class='textarea' placeholder='${config.placeholder ? config.placeholder : 'Input'}'
                    ${config.rows ? ` rows='${config.rows}'` : ''} ${this.templateProps()}></textarea>
                </label>`;
    }
}
exports.Textarea = Textarea;
class Dropdown extends Input {
    constructor(ele, name, options, config) {
        super(ele, name, config);
        this.options = options;
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('select').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    optionsTemplate() {
        return this.options.map(o => {
            return `<option value='${o.value}'>${o.text}</option>`;
        }).join('');
    }
    template() {
        let config = this.config;
        return `<label>${config.label ? config.label : this.name}
                    <span class='select'><select ${this.templateProps()}>${this.optionsTemplate()}</select></span>
                </label>`;
    }
}
exports.Dropdown = Dropdown;
class Checkbox extends Input {
    constructor(ele, name, config) {
        super(ele, name, config);
        if (config.label)
            this.label = config.label;
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('input').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    onChange(e) {
        this.value = e.target.checked;
    }
    template() {
        let config = this.config;
        return `<label class='checkbox'>${config.label ? config.label : this.name}<input type='checkbox' ${this.templateProps()}></label>`;
    }
}
exports.Checkbox = Checkbox;
class Radio extends Input {
    constructor(ele, name, options, config) {
        super(ele, name, config);
        this.options = options;
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.ele.querySelector('div').addEventListener('change', this.onChange.bind(this));
        return super.init();
    }
    radioTemplate() {
        let config = this.config;
        return this.options.map(o => {
            return `<label class='radio'>${config.label ? config.label : this.name}
                        <input type='radio' value='${o.value}' name='${this.name}'>${o.text}
                    </label>`;
        }).join('');
    }
    onChange(e) {
        let checkedInput = Array.from(this.ele.querySelectorAll('input'))
            .find(i => {
            return i.checked;
        });
        this.value = checkedInput.value;
    }
    template() {
        return `<div class='control'>${this.radioTemplate()}</div>`;
    }
}
exports.Radio = Radio;

},{"./Component":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Component_1 = require("./components/common/Component");
const CreateInput_1 = require("./components/CreateInput");
class Main extends Component_1.default {
    static load() {
        let main = new Main(document.body);
        main.init();
    }
    async init() {
        this.ele.innerHTML = this.template();
        this.childComponents.push(new CreateInput_1.default(this.ele.querySelector('#form')));
        return super.init();
    }
    template() {
        return `<div id='form'></div>`;
    }
}
document.addEventListener('DOMContentLoaded', Main.load);

},{"./components/CreateInput":1,"./components/common/Component":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
